{"version":3,"file":"813.2dbfbd130eb21a1b.js","mappings":"2KAAO,MAAMA,EAAYC,OAAOC,OAAO,CACrCC,SAAU,GACVC,SAAU,GACVC,kBAAmB,gDCDd,MAAMC,EAA2BA,CAACC,EAAaC,IAC5CC,GACFA,EAAQC,MAAMC,QAAUJ,GAAOE,EAAQC,MAAMC,QAAUH,EAAY,KAEhE,CAAEI,iBAAiB,oHCAvB,SAASC,EAAUC,EAAuBC,GAC7C,OAAIA,EACQC,MAAWC,KAAOF,EAAkBG,QAAKC,KAAK,GCLvD,SAASC,IACZ,SAAOC,KAAQ,CAACL,EAAQM,KACpBN,EAAOO,aAAUC,KAAyBF,EAAYG,KAAK,EAEnE,CDCkEL,IAAmBJ,EAAOE,KAAKL,EAAUC,MAAuB,EAEvHY,KAAS,CAAChB,EAAOiB,OAAUC,MAAUd,EAAsBJ,EAAOiB,IAAQT,QAAKC,KAAK,IAAC,EAAGU,KAAMnB,IACzG,wBETO,MAAMoB,UAGJ,6CCaF,IAAMC,EAAiB,MAAxB,MAAOA,EAMXC,YAA6BC,GAAAC,KAAAD,cALZC,KAAAC,WAA2B,GAC3BD,KAAAE,SAAWN,UAErBI,KAAAG,WAAqB,CAE2B,CAEhDC,SAASC,EAAO,GACrB,MAAMC,EAAYN,KAAKC,WAAWM,KAAMC,GAAUA,EAAMH,OAASA,GAEjE,OAAIC,GACF,EAAOG,MAAGH,EAAUI,OAAO1B,KC3B1B,SAAS2B,EAAMC,EAAKC,EAAYC,KACnC,MAAMC,KAAWC,KAAMJ,EAAKC,GAC5B,OAAOlC,EAAU,IAAMoC,EAC3B,CDwBsCJ,CAAM,MAMjCX,KAAKD,YACTkB,IAAyB,GAAGjB,KAAKE,uBAHPG,uDAI1BrB,QACCkC,KAAI,EAAGC,KAAMT,EAAOU,iBACbpB,KAAKG,aACRH,KAAKG,WAAakB,KAAKC,MAAMF,EARpB,KAWJV,EAAMQ,IAAI,EAAGK,KAAIC,OAAMC,aAAWC,UAAQC,YAC/C,IAAIC,EAA2B,GAE/B,OAAID,GAAOlD,SACTmD,EAAyB,IAAjBD,EAAMlD,OAAekD,EAAM,GAAKA,GAGnC,CACLJ,KACAC,OACAC,aACAI,MAAOH,GAAOI,MACdF,cAGL,EACDG,KAAKrB,IACHV,KAAKC,WAAW+B,KAAK,CAAE3B,OAAMK,SAAO,GAG5C,CAACuB,SAAAjC,KAAA,mBAAAkC,iBA9CUrC,GAAiBsC,MAAAC,MAAA,EAAAH,SAAAjC,KAAA,WAAAqC,EAAAC,IAAA,OAAjBzC,EAAiB0C,QAAjB1C,EAAiB2C,UAAAC,WADJ,gBACb5C,CAAiB,0EEExBsC,MAAA,wBAKEA,MAAA,GACFA,kCAHEA,MAAA,QAAAO,GAEAP,MAAA,GAAAA,MAAA,IAAAO,EAAA,+BA8BAP,MAAA,WACEA,MAAA,GAAaA,MAAA,aAA8BA,MAAA,GAAWA,QACtDA,MAAA,GACFA,mDAFEA,MAAA,GAAAA,MAAA,IAAAQ,EAAA,KAA2CR,MAAA,GAAAA,MAAAS,GAC3CT,MAAA,GAAAA,MAAA,IAAAU,EAAA,kLAkCNV,MAAA,WAAAA,CAOC,iBAMGA,MAAA,iBAAAW,GAAA,MAAAC,EAAAZ,MAAAa,GAAAC,UAAAC,EAAAf,QAAA,OAASA,MAAAe,EAAAC,WAAAL,EAAAM,OAAAL,GAAqC,GALhDZ,QAUAA,MAAA,YAQFA,yDAvBEA,MAAA,UAAAA,MAAA,EAAAkB,GAAAC,EAAAC,QAAAD,EAAAC,UAWEpB,MAAA,GAAAA,MAAA,UAAAqB,EAAAC,eAAAV,IAMAZ,MAAA,GAAAA,MAAA,UAAAA,MAAA,EAAAuB,EAAAJ,EAAAC,SAAAD,EAAAC,SAAApB,CAGE,MAAAY,EAAAlB,MAAAM,+VC9EH,IAAMwB,GAAe,MAAtB,MAAOA,EAkBX7D,YACmB8D,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAPAnE,KAAA4D,MACA5D,KAAA6D,cACA7D,KAAA8D,gBACA9D,KAAA+D,UACA/D,KAAAgE,kBACAhE,KAAAiE,OACAjE,KAAAkE,iBACAlE,KAAAmE,gBAzBZnE,KAAAoE,UAAYtG,EACZkC,KAAAU,MAAiB,GACjBV,KAAAqE,SAAWrE,KAAK4D,IAAIU,MAAM,CAC/BC,aAAc,CAAC,GACf/C,KAAM,CAAC,GAAI,CAACgD,KAAWC,WACvB/D,MAAOV,KAAK4D,IAAIc,MACd,GACA,CACEF,KAAWC,SACXrG,EAAyBN,EAAUG,SAAUH,EAAUI,cAItD8B,KAAAQ,MAAkB,GAEjBR,KAAA2E,gBAAkB,IAAIC,IAW3B,CAEHC,WACE7E,KAAK8E,YACL9E,KAAK2E,gBAAgBI,IACnB/E,KAAKqE,SAASW,SAAST,aAAaU,aAAa5F,UAAWgB,IAC1DL,KAAK8E,UAAUzE,EAAK,IAIxB,MAAM6E,EAASlF,KAAKgE,gBAAgBmB,SAASC,OAAO7D,GACpD,GAAI2D,EAAQ,CACV,MAAQ1D,OAAMd,SAAUV,KAAK8D,cAAcuB,MAAMH,GACjDlF,KAAKsF,aAAeJ,EAEpBlF,KAAKqE,SAASW,SAASxD,KAAK+D,SAAS/D,GACrCd,EAAM8E,QAASC,IACbzF,KAAKqE,SAASW,SAAStE,MAAMsB,KAAKhC,KAAK4D,IAAIrF,QAAQkH,GAAK,GAG9D,CAEAC,cACE1F,KAAK2E,gBAAgBgB,cACrB3F,KAAKqE,SAASuB,OAChB,CAEQd,UAAUzE,EAAe,GAC/BL,KAAKkE,eAAe2B,KAAK,sBAEzB7F,KAAK2E,gBAAgBI,IACnB/E,KAAK6D,YACFzD,SAASC,GACTrB,QAAK+C,KAAI,SACT1C,UAAU,CACTyG,KAAOpF,IACLV,KAAKU,MAAQA,EACbV,KAAKiE,KAAK8B,gBAEL/F,KAAKQ,MAAM/B,SACduB,KAAKQ,MAAQwF,MAAMC,KACjB,CAAExH,OAAQuB,KAAK6D,YAAY1D,YAC3B,CAAC+F,EAAGC,IAAMA,EAAI,IAGlBnG,KAAKiE,KAAK8B,eAAa,EAEzBK,MAAOA,KACLpG,KAAKmE,cAAc0B,KAAK,wCACxB7F,KAAKkE,eAAemC,MAAI,EAE1BC,SAAUA,IAAMtG,KAAKkE,eAAemC,SAG5C,CAEOlD,WAAWoD,EAAyBd,GACzC,MAAM/E,EAAQV,KAAKqE,SAASW,SAAStE,MAErC,GAAI6F,EAAMhD,QAKR,OAJwB7C,EAAMsE,SAASwB,OACpCjI,GAAaA,EAAQC,MAAgBgD,OAASiE,EAAKjE,MACpD/C,SAEsBX,EAAUK,mBAChCoI,EAAMhD,SAAWgD,EAAMhD,aACvBvD,KAAKmE,cAAc0B,KACjB,6DAKAnF,EAAMsE,SAASvG,SAAWX,EAAUI,UACtCqI,EAAMhD,SAAWgD,EAAMhD,aACvBvD,KAAKmE,cAAc0B,KAAK,iDAI1BnF,EAAMsB,KAAKhC,KAAK4D,IAAIrF,QAAQkH,IAI9B,MAAMhG,EAAQiB,EAAMsE,SAASyB,UAAWlI,GAAYA,EAAQC,QAAUiH,GAClEhG,GAAS,GACXiB,EAAMgG,SAASjH,EAEnB,CAEOkH,WACL,GAAI3G,KAAKqE,SAASuC,QAAS,OAE3B,MAAQpF,OAAMd,SAAUV,KAAKqE,SAAS7F,MACjCwB,KAAKsF,cAIRtF,KAAK8D,cAAc+C,WAAW7G,KAAKsF,aAAe,CAAE9D,OAAMd,UAC1DV,KAAKmE,cAAc0B,KAAK,yBAJxB7F,KAAK8D,cAAcgD,QAAQ,CAAEtF,OAAMd,UACnCV,KAAKmE,cAAc0B,KAAK,wBAM1B7F,KAAK+D,QAAQgD,cAAc,QAC7B,CAEOtD,eAAegC,GAKpB,OAJkBzF,KAAKqE,SAASW,SAAStE,MAAMsE,SAASgC,KACrDzI,GAAaA,EAAQC,MAAgB+C,KAAUkE,EAAKlE,GAIzD,CAACU,SAAAjC,KAAA,mBAAAkC,iBAxIUyB,GAAexB,MAAAC,MAAAD,MAAA8E,GAAA9E,MAAA+E,KAAA/E,MAAAgF,MAAAhF,MAAAgF,MAAAhF,mBAAAiF,KAAAjF,MAAAkF,KAAA,EAAApF,SAAAjC,KAAA,UAAAqC,EAAAiF,IAAA,MAAf3D,EAAe4D,UAAA,iBAAAC,YAAA,EAAAC,SAAA,CAAAtF,OAAAuF,MAAA,GAAAC,KAAA,GAAAC,OAAA,wsDAAAC,SAAA,SAAAC,EAAAC,MAAA,EAAAD,IDpC5B3F,MAAA,iBAMAA,MAAA,YAA6BA,MAAA,6BAAY4F,EAAApB,UAAU,GACjDxE,MAAA,UAAAA,CAAsE,uBAIlEA,MAAA,aACAA,MAAA,aAA8CA,MAAA,qBAAeA,UAG/DA,MAAA,iBAAAA,CAGC,aACoCA,MAAA,yBAAgBA,QACnDA,MAAA,GAAA6F,EAAA,yBAOF7F,QAEAA,MAAA,eAYEA,MAAA,eACFA,UAGFA,MAAA,YAAAA,CAAqE,cACvBA,MAAA,kBAAWA,QAEvDA,MAAA,YACEA,MAAA,GAAA8F,EAAA,0BAAA9F,OAYAA,MAAA,MAAAA,CAOgB,MAPhBA,CAOgB,OAiBlBA,UAGFA,MAAA,aAGEA,MAAA,GAAA+F,EAAA,eA2BF/F,kCAhHIA,MAAA,GAAAA,MAAA,YAAA4F,EAAA1D,UAemBlC,MAAA,GAAAA,MAAA,UAAA4F,EAAAvH,OAWnB2B,MAAA,GAAAA,MAAA,UAAAA,MAAA,GAAAgG,EAAAJ,EAAA1D,SAAAuC,QAAAmB,EAAA1D,SAAA+D,OAAAjG,CAIE,WAAA4F,EAAA1D,SAAAuC,SA0BAzE,MAAA,GAAAA,MAAA,mBAAAkG,EAAAlG,CAAyB,0BAAAA,MAAA,GAAAmG,EAAAP,EAAA3D,UAAAnG,WAQzBkE,MAAA,GAAAA,MAAA,mBAAAkG,EAAAlG,CAAyB,0BAAAA,MAAA,GAAAoG,EAAAR,EAAA3D,UAAAlG,WAQzBiE,MAAA,GAAAA,MAAA,mBAAAkG,EAAAlG,CAAyB,0BAAAA,MAAA,GAAAqG,EAAAT,EAAA3D,UAAAjG,oBAcVgE,MAAA,GAAAA,MAAA,UAAA4F,EAAArH,uBCnEnB+H,KAAYC,eACZC,IACAC,KAAmBxG,kCACnByG,MAAmBC,kBACnBC,MAAeD,YACfE,MAAeF,MACfG,MAAeH,OAAAI,OAAA,8EAKNvF,CAAe","names":["DeckRules","Object","freeze","minCards","maxCards","cardsWithSameName","deckCardsLengthValidator","min","max","control","value","length","deckCardsLength","delayWhen","delayDurationSelector","subscriptionDelay","source","concat","pipe","take","ignoreElements","operate","subscriber","subscribe","createOperatorSubscriber","noop","mergeMap","index","innerFrom","mapTo","environment","PokemonApiService","constructor","_httpModule","this","_cardPages","_baseURL","totalPages","getCards","page","pageFound","find","pages","of","cards","delay","due","scheduler","asyncScheduler","duration","timer","get","map","data","totalCount","Math","round","id","name","supertype","images","types","color","image","small","tap","push","static","t","i0","i1","core","Yz7","factory","Éµfac","providedIn","page_r4","before_r5","value_r7","after_r6","$event","card_r8","_r11","$implicit","ctx_r10","toggleCard","target","_c0","_r9","checked","ctx_r3","cardIsSelected","_c1","CreateComponent","_fb","_pokemonAPI","_decksService","_router","_activatedRoute","_cdr","_loaderService","_toastService","deckRules","deckForm","group","pageSelected","Validators","required","array","_subscriptions$","Subscription","ngOnInit","_getCards","add","controls","valueChanges","deckId","snapshot","params","decks","deckIdToEdit","setValue","forEach","card","ngOnDestroy","unsubscribe","reset","show","next","detectChanges","Array","from","_","i","error","hide","complete","input","filter","findIndex","removeAt","saveDeck","invalid","updateDeck","addDeck","navigateByUrl","some","i2","i3","i4","i5","i6","Xpm","selectors","standalone","features","decls","vars","consts","template","rf","ctx","CreateComponent_igx_select_item_10_Template","CreateComponent_ng_template_17_Template","CreateComponent_div_23_Template","_c2","valid","_r1","_c3","_c4","_c5","CommonModule","i7","TitleComponent","ReactiveFormsModule","IgxInputGroupModule","i8","IgxSelectModule","IgxButtonModule","IgxRippleModule","styles"],"sourceRoot":"webpack:///","sources":["./src/app/@core/constants/deck-rules.ts","./src/app/@shared/functions/validators/deck-length.validator.ts","./node_modules/rxjs/dist/esm/internal/operators/delayWhen.js","./node_modules/rxjs/dist/esm/internal/operators/ignoreElements.js","./src/environments/environment.production.ts","./src/app/@shared/services/pokemon-api.service.ts","./node_modules/rxjs/dist/esm/internal/operators/delay.js","./src/app/create/create.component.html","./src/app/create/create.component.ts"],"sourcesContent":["export const DeckRules = Object.freeze({\r\n  minCards: 24,\r\n  maxCards: 60,\r\n  cardsWithSameName: 4,\r\n});\r\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\r\n\r\nexport const deckCardsLengthValidator = (min: number, max: number) => {\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    if (control.value.length >= min && control.value.length <= max) return null;\r\n\r\n    return { deckCardsLength: true };\r\n  };\r\n};\r\n","import { concat } from '../observable/concat';\nimport { take } from './take';\nimport { ignoreElements } from './ignoreElements';\nimport { mapTo } from './mapTo';\nimport { mergeMap } from './mergeMap';\nimport { innerFrom } from '../observable/innerFrom';\nexport function delayWhen(delayDurationSelector, subscriptionDelay) {\n    if (subscriptionDelay) {\n        return (source) => concat(subscriptionDelay.pipe(take(1), ignoreElements()), source.pipe(delayWhen(delayDurationSelector)));\n    }\n    return mergeMap((value, index) => innerFrom(delayDurationSelector(value, index)).pipe(take(1), mapTo(value)));\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nexport function ignoreElements() {\n    return operate((source, subscriber) => {\n        source.subscribe(createOperatorSubscriber(subscriber, noop));\n    });\n}\n","import { IEnvironment } from '@core/interfaces/environment.interface';\n\nexport const environment: IEnvironment = {\n  production: true,\n  api: {\n    url: 'https://api.pokemontcg.io/v2',\n  },\n};\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ICard } from '@shared/interfaces/card.interface';\nimport { ICardsPage } from '@shared/interfaces/cards-page.interface';\nimport { Observable, delay, map, of, tap } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\ninterface IPokemonTCGResponse {\n  data: ICardRoot[];\n  totalCount: number;\n}\n\ninterface ICardRoot extends Omit<ICard, 'card'> {\n  images: { small: string; large: string };\n  types?: string[];\n}\n\n@Injectable({ providedIn: 'root' })\nexport class PokemonApiService {\n  private readonly _cardPages: ICardsPage[] = [];\n  private readonly _baseURL = environment.api.url;\n\n  public totalPages: number = 0;\n\n  constructor(private readonly _httpModule: HttpClient) {}\n\n  public getCards(page = 1): Observable<ICard[]> {\n    const pageFound = this._cardPages.find((pages) => pages.page === page);\n\n    if (pageFound) {\n      return of(pageFound.cards).pipe(delay(300));\n    }\n\n    const pageSize = 60;\n    const queryString = `?page=${page}&pageSize=${pageSize}&select=id,name,supertype,images,types`;\n\n    return this._httpModule\n      .get<IPokemonTCGResponse>(`${this._baseURL}/cards${queryString}`)\n      .pipe(\n        map(({ data: cards, totalCount }) => {\n          if (!this.totalPages) {\n            this.totalPages = Math.round(totalCount / pageSize);\n          }\n\n          return cards.map(({ id, name, supertype, images, types }) => {\n            let color: string | string[] = '';\n\n            if (types?.length) {\n              color = types.length === 1 ? types[0] : types;\n            }\n\n            return {\n              id,\n              name,\n              supertype,\n              image: images.small,\n              color,\n            } as ICard;\n          });\n        }),\n        tap((cards) => {\n          this._cardPages.push({ page, cards });\n        })\n      );\n  }\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { delayWhen } from './delayWhen';\nimport { timer } from '../observable/timer';\nexport function delay(due, scheduler = asyncScheduler) {\n    const duration = timer(due, scheduler);\n    return delayWhen(() => duration);\n}\n","<app-title\r\n  title=\"Criar baralho\"\r\n  description=\"Selecione suas cartas favoritas, dÃª um nome ao seu baralho e colecione essa\r\nexperiÃªncia incrÃ­vel!\"\r\n/>\r\n\r\n<form [formGroup]=\"deckForm\" (ngSubmit)=\"saveDeck()\">\r\n  <div class=\"mb-4 flex gap-2 justify-between flex-wrap md:flex-nowrap\">\r\n    <igx-input-group\r\n      class=\"bg-blue-950 bg-opacity-50 rounded-ss-md rounded-se-md flex-grow basis-3/5\"\r\n    >\r\n      <input igxInput name=\"name\" type=\"text\" formControlName=\"name\" required />\r\n      <label class=\"text-white\" igxLabel for=\"name\">Nome do baralho</label>\r\n    </igx-input-group>\r\n\r\n    <igx-select\r\n      class=\"bg-blue-950 bg-opacity-50 rounded-ss-md rounded-se-md flex-grow\"\r\n      formControlName=\"pageSelected\"\r\n    >\r\n      <label class=\"text-white\" igxLabel>PÃ¡gina de cartas</label>\r\n      <igx-select-item\r\n        *ngFor=\"let page of pages\"\r\n        class=\"transition-colors hover:bg-gray-200\"\r\n        [value]=\"page\"\r\n      >\r\n        {{ page }}\r\n      </igx-select-item>\r\n    </igx-select>\r\n\r\n    <button\r\n      type=\"submit\"\r\n      class=\"text-yellow-400 bg-blue-950 bg-opacity-50 rounded border-2 border-solid flex-grow\"\r\n      [ngClass]=\"{\r\n        'cursor-no-drop opacity-50 bg-gray-400 pointer-events-auto border-transparent':\r\n          deckForm.invalid,\r\n        'border-yellow-400': deckForm.valid\r\n      }\"\r\n      [disabled]=\"deckForm.invalid\"\r\n      igxButton=\"contained\"\r\n      igxRipple\r\n    >\r\n      Salvar\r\n    </button>\r\n  </div>\r\n\r\n  <div class=\"mb-4 p-4 text-white border-2 border-white border-dashed\">\r\n    <span class=\"text-yellow-400 font-semibold\">Requisitos:</span>\r\n\r\n    <ul class=\"list-none inline\">\r\n      <ng-template\r\n        #rule\r\n        let-before=\"before\"\r\n        let-after=\"after\"\r\n        let-value=\"value\"\r\n      >\r\n        <li class=\"inline\">\r\n          {{ before }} <span class=\"text-yellow-400\">{{ value }}</span>\r\n          {{ after }};\r\n        </li>\r\n      </ng-template>\r\n\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"rule\"\r\n        [ngTemplateOutletContext]=\"{\r\n        before: 'MÃ­nimo',\r\n        value: deckRules.minCards,\r\n        after: 'cartas',\r\n      }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"rule\"\r\n        [ngTemplateOutletContext]=\"{\r\n        before: 'MÃ¡ximo',\r\n        value: deckRules.maxCards,\r\n        after: 'cartas',\r\n      }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"rule\"\r\n        [ngTemplateOutletContext]=\"{\r\n        before: 'AtÃ©',\r\n        value: deckRules.cardsWithSameName,\r\n        after: 'cartas com o mesmo nome',\r\n      }\"\r\n      ></ng-container>\r\n    </ul>\r\n  </div>\r\n\r\n  <div\r\n    class=\"py-4 flex gap-4 flex-wrap justify-center h-full max-h-[684px] lg:max-h-screen overflow-y-auto\"\r\n  >\r\n    <div\r\n      *ngFor=\"let card of cards\"\r\n      class=\"flex relative transition-all duration-300 hover:scale-105 border-4 rounded-2xl\"\r\n      [ngClass]=\"{\r\n        'border-transparent': !checkboxRef.checked,\r\n        'border-green-400': checkboxRef.checked\r\n      }\"\r\n    >\r\n      <input\r\n        class=\"absolute w-full h-full opacity-0 cursor-pointer z-10\"\r\n        type=\"checkbox\"\r\n        name=\"cards\"\r\n        id=\"cards\"\r\n        (click)=\"toggleCard($any($event.target), card)\"\r\n        [checked]=\"cardIsSelected(card)\"\r\n        #checkboxRef\r\n      />\r\n\r\n      <img\r\n        class=\"max-w-64 transition-opacity duration-300 rounded-xl\"\r\n        [ngClass]=\"{\r\n          'opacity-100': checkboxRef.checked,\r\n          'opacity-50': !checkboxRef.checked\r\n        }\"\r\n        [src]=\"card.image\"\r\n      />\r\n    </div>\r\n  </div>\r\n</form>\r\n","import { CommonModule } from '@angular/common';\nimport { ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { DeckRules } from '@core/constants/deck-rules';\nimport { TitleComponent } from '@shared/components/title/title.component';\nimport { ICard } from '@shared/interfaces/card.interface';\nimport { IDeck } from '@shared/interfaces/deck.interface';\nimport { DecksService } from '@shared/services/decks.service';\nimport { LoaderService } from '@shared/services/loader.service';\nimport { PokemonApiService } from '@shared/services/pokemon-api.service';\nimport { ToastService } from '@shared/services/toast.service';\nimport {\n  IgxButtonModule,\n  IgxInputGroupModule,\n  IgxRippleModule,\n  IgxSelectModule,\n} from 'igniteui-angular';\nimport { Subscription, tap } from 'rxjs';\nimport { deckCardsLengthValidator } from '../@shared/functions/validators/deck-length.validator';\n\n@Component({\n  selector: 'app-create',\n  standalone: true,\n  imports: [\n    CommonModule,\n    TitleComponent,\n    ReactiveFormsModule,\n    IgxInputGroupModule,\n    IgxSelectModule,\n    IgxButtonModule,\n    IgxRippleModule,\n  ],\n  templateUrl: './create.component.html',\n  styleUrls: ['./create.component.scss'],\n})\nexport class CreateComponent implements OnInit, OnDestroy {\n  public deckRules = DeckRules;\n  public cards: ICard[] = [];\n  public deckForm = this._fb.group({\n    pageSelected: [1],\n    name: ['', [Validators.required]],\n    cards: this._fb.array(\n      [],\n      [\n        Validators.required,\n        deckCardsLengthValidator(DeckRules.minCards, DeckRules.maxCards),\n      ]\n    ),\n  });\n  public pages: number[] = [];\n  private deckIdToEdit?: number;\n  private _subscriptions$ = new Subscription();\n\n  constructor(\n    private readonly _fb: FormBuilder,\n    private readonly _pokemonAPI: PokemonApiService,\n    private readonly _decksService: DecksService,\n    private readonly _router: Router,\n    private readonly _activatedRoute: ActivatedRoute,\n    private readonly _cdr: ChangeDetectorRef,\n    private readonly _loaderService: LoaderService,\n    private readonly _toastService: ToastService\n  ) {}\n\n  ngOnInit(): void {\n    this._getCards();\n    this._subscriptions$.add(\n      this.deckForm.controls.pageSelected.valueChanges.subscribe((page) => {\n        this._getCards(page!);\n      })\n    );\n\n    const deckId = this._activatedRoute.snapshot.params['id'];\n    if (deckId) {\n      const { name, cards } = this._decksService.decks[deckId];\n      this.deckIdToEdit = deckId;\n\n      this.deckForm.controls.name.setValue(name);\n      cards.forEach((card) => {\n        this.deckForm.controls.cards.push(this._fb.control(card));\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._subscriptions$.unsubscribe();\n    this.deckForm.reset();\n  }\n\n  private _getCards(page: number = 1) {\n    this._loaderService.show('Buscando cartas...');\n\n    this._subscriptions$.add(\n      this._pokemonAPI\n        .getCards(page)\n        .pipe(tap(() => {}))\n        .subscribe({\n          next: (cards) => {\n            this.cards = cards;\n            this._cdr.detectChanges();\n\n            if (!this.pages.length) {\n              this.pages = Array.from(\n                { length: this._pokemonAPI.totalPages },\n                (_, i) => i + 1\n              );\n            }\n            this._cdr.detectChanges();\n          },\n          error: () => {\n            this._toastService.show('Ocorreu um erro ao buscar as cartas!');\n            this._loaderService.hide();\n          },\n          complete: () => this._loaderService.hide(),\n        })\n    );\n  }\n\n  public toggleCard(input: HTMLInputElement, card: ICard) {\n    const cards = this.deckForm.controls.cards;\n\n    if (input.checked) {\n      const cardsNameInDeck = cards.controls.filter(\n        (control) => (control.value as ICard).name === card.name\n      ).length;\n\n      if (cardsNameInDeck === DeckRules.cardsWithSameName) {\n        input.checked = !input.checked;\n        this._toastService.show(\n          'NÃºmero mÃ¡ximo de cartas com o mesmo nome atingido!'\n        );\n        return;\n      }\n\n      if (cards.controls.length === DeckRules.maxCards) {\n        input.checked = !input.checked;\n        this._toastService.show('NÃºmero mÃ¡ximo de cartas atingido!');\n        return;\n      }\n\n      cards.push(this._fb.control(card));\n      return;\n    }\n\n    const index = cards.controls.findIndex((control) => control.value === card);\n    if (index >= 0) {\n      cards.removeAt(index);\n    }\n  }\n\n  public saveDeck() {\n    if (this.deckForm.invalid) return;\n\n    const { name, cards } = this.deckForm.value as IDeck;\n    if (!this.deckIdToEdit) {\n      this._decksService.addDeck({ name, cards });\n      this._toastService.show('Baralho adicionado!');\n    } else {\n      this._decksService.updateDeck(this.deckIdToEdit!, { name, cards });\n      this._toastService.show('Baralho atualizado!');\n    }\n\n    this._router.navigateByUrl('/list');\n  }\n\n  public cardIsSelected(card: ICard) {\n    const cardFound = this.deckForm.controls.cards.controls.some(\n      (control) => (control.value as ICard)['id'] === card.id\n    );\n\n    return cardFound;\n  }\n}\n"],"x_google_ignoreList":[2,3,6]}